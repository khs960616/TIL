분리와 확장이 고려된 객체 지향적인 개발방식은 변화에 효과적으로 대처할수 있도록 해준다. 

분리 : 일반적으로 변경사항이나 발전사항은 한 번에 한 가지 관심사항에 집중해서 일어난다. 

(관심사의 분리) 관심이 같은 것 끼리 모아주어야한다. 

템플릿 메소드 패턴
: 슈퍼클래스의 기본적인 로직의 흐름을 만들고, 기능중 일부를 추상 메서드로 만들거나, 
오버라이딩이 가능한 protected 메소드등으로 만들어 하위 클래스에서 구현해서 사용하도록 만드는 방법
(변하지 않는 기능 -> 슈퍼클래스에 만듬, 자주 변하는 기능 -> 하위 클래스에서 구현하도록 만듬)


훅 메서드: 
슈퍼클래스에서 디폴트 기능을 정의해두거나, 비워두었다가 서브 클래스에서 선택적으로 오버라이즈 할 수 있도록 만들어둔 메서드 

팩토리 메서드 패턴 : 서브클래스에서 해당 클래스에서 사용되는 특정 오브젝트를 어떤 식으로 생성할 것인지 결정하게 만드는 패턴
(자바에서는 일반적으로 오브젝트를 만드는 메서드를 팩토리 메서드라고 부르기도 해는데 혼동해서는 안됨)


결국 위 세가지 디자인 패턴은 상속을 통해 슈퍼클래스의 기능을 확장해서 사용하겠다는 의미가 크다.  

상속을 이용한 관심사의 분리의 한계점?
1. 자바에서는 다중 상속이 되지 않기 때문에 만약 나중에 다른 관심사를 추가적으로 분리해야되는 경우 슈퍼클래스를 활용하기 어렵다.
2. 슈퍼클래스와 하위 클래스의 관계가 생각보다 밀접하다. 


OCP (Open-Close- principle) 개방 폐쇠 원칙
: 확장에는 열려있고 수정에는 닫혀있는 설계 원칙 


높은 응집도와 낮은 결합도
응집도가 높다는 의미는 변화가 일어날때 해당 모듈에서 변하는 부분이 크다는 것이다. 
낮은 결합도(중요) 책임과 관심사가 다른 오브젝트들 간에는 결합이 느슨하다. (관계를 유지하기 위한 최소한의 정보만 클라이언트 측에 둠으로써 결합도를 낮춰야한다.) 
